// TODO fix dependencies in all projects, use minimal set of dependencies etc.
plugins {
  id "fr.brouillard.oss.gradle.jgitver" version "$gradleJgitverPluginVersion"
}

jgitver {
  mavenLike true
  policy {
    pattern = "(.*)"
    transformations = ["IGNORE"]
  }
}

allprojects {
  repositories {
    mavenLocal()
    mavenCentral()
  }

  configurations {
    compileOnly.extendsFrom(annotationProcessor)

    springBom
    compileOnly.extendsFrom(springBom)
    annotationProcessor.extendsFrom(springBom)
    implementation.extendsFrom(springBom)
    testAnnotationProcessor.extendsFrom(springBom)
  }
}

subprojects {
  apply plugin: "jacoco"
  apply plugin: "java"
  apply plugin: "java-library"
  apply plugin: "maven-publish"
  apply plugin: "signing"

  group = "net.croz.nrich"

  sourceCompatibility = "1.8"

  java {
    ["envers", "reactor", "web", "webMvc", "webFlux"].forEach {
      registerFeature(it) {
        usingSourceSet(sourceSets.main)
      }
    }

    withSourcesJar()
    withJavadocJar()
  }

  dependencies {
    springBom platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")

    constraints {
      implementation "org.apache.poi:poi:$apachePoiVersion"
      implementation "org.apache.poi:poi-ooxml:$apachePoiVersion"
      implementation "org.modelmapper:modelmapper:$modelMapperVersion"
    }
  }

  test {
    useJUnitPlatform()
    jvmArgs = ["-noverify", "-XX:TieredStopAtLevel=1"]
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        from components.java
        suppressAllPomMetadataWarnings()

        pom {
          name = getProject().getName()
          description = "$projectDescription"
          url = "$projectRepositoryUrl"

          licenses {
            license {
              name = "$licenseName"
              url = "$licenseUrl"
            }
          }

          developers {
            developer {
              name = "$developerName"
              email = "$developerEmail"
              organization = "$developerOrganization"
              organizationUrl = "$developerOrganizationUrl"
            }
          }

          def gitRepositoryUrl = "scm:git:${projectRepositoryUrl}.git"
          scm {
            connection = gitRepositoryUrl
            developerConnection = gitRepositoryUrl
            url = "$projectRepositoryUrl"
          }
        }
      }
    }

    repositories {
      maven {
        def releasesRepoUrl = "$sonatypeNexusUrl/service/local/staging/deploy/maven2/"
        def snapshotsRepoUrl = "$sonatypeNexusUrl/content/repositories/snapshots/"

        url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl

        credentials {
          username "$sonatypeUsername"
          password System.getenv("SONATYPE_PASSWORD")
        }
      }
    }
  }

  signing {
    // The gpg private needs to be stored in ascii-armored format
    useInMemoryPgpKeys(System.getenv("GPG_PRIVATE_KEY"), System.getenv("GPG_PASSPHRASE"))
    sign publishing.publications.mavenJava
  }

  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }

  tasks.withType(Sign) {
    onlyIf {
      System.getenv("GPG_PRIVATE_KEY") && System.getenv("GPG_PASSPHRASE")
    }
  }
}
